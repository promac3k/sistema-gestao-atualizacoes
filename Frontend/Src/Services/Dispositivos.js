import axios from "axios";
import API_CONFIG, { ENDPOINTS, DEFAULT_HEADERS } from "./config";

// Configura√ß√£o da inst√¢ncia do axios
const apiClient = axios.create({
    baseURL: API_CONFIG.BASE_URL,
    timeout: API_CONFIG.TIMEOUT,
    headers: DEFAULT_HEADERS,
});

// Interceptor para logging das requisi√ß√µes
apiClient.interceptors.request.use(
    (config) => {
        console.log(
            `üöÄ Fazendo requisi√ß√£o: ${config.method?.toUpperCase()} ${
                config.url
            }`
        );
        return config;
    },
    (error) => {
        console.error("‚ùå Erro na configura√ß√£o da requisi√ß√£o:", error);
        return Promise.reject(error);
    }
);

// Interceptor para tratamento das respostas
apiClient.interceptors.response.use(
    (response) => {
        console.log(
            `‚úÖ Resposta recebida: ${response.status} - ${response.config.url}`
        );
        return response;
    },
    (error) => {
        console.error(
            `‚ùå Erro na resposta: ${
                error.response?.status || "Network Error"
            } - ${error.config?.url}`
        );
        return Promise.reject(error);
    }
);

// Fun√ß√£o para verificar se a API est√° dispon√≠vel
export const checkApiHealth = async () => {
    try {
        console.log("üîç Verificando sa√∫de da API...");

        // Criar cliente espec√≠fico para health check
        const healthClient = axios.create({
            baseURL: "http://localhost:3000",
            timeout: API_CONFIG.TIMEOUT,
            headers: DEFAULT_HEADERS,
        });

        // Usar o endpoint raiz que sabemos que funciona
        const response = await healthClient.get("/");

        // Verificar se recebemos uma resposta v√°lida
        if (response.status === 200 && response.data) {
            console.log("‚úÖ API Health Check: Sucesso");
            return {
                success: true,
                message: "API est√° funcionando corretamente",
                data: response.data,
            };
        } else {
            console.log("‚ö†Ô∏è API Health Check: Resposta inesperada");
            return {
                success: false,
                message: "API retornou resposta inesperada",
            };
        }
    } catch (error) {
        console.error("‚ùå API Health Check: Falhou", error.message);
        return {
            success: false,
            message: `API n√£o est√° dispon√≠vel: ${error.message}`,
        };
    }
};

// Fun√ß√£o otimizada para obter todos os dados da p√°gina de dispositivos (NOVA - RECOMENDADA)
export const getDispositivosDataOptimized = async () => {
    try {
        console.log(
            "üìä Iniciando carregamento otimizado da p√°gina de dispositivos"
        );

        const response = await apiClient.get(
            ENDPOINTS.DISPOSITIVOS.DATA_OPTIMIZED
        );

        if (response.data && response.data.success) {
            console.log(
                "‚úÖ Dados completos dos dispositivos carregados com sucesso (otimizado)"
            );
            return {
                success: true,
                data: response.data.data,
                message: response.data.message,
            };
        } else {
            return {
                success: false,
                message: response.data?.message || "Resposta inv√°lida da API",
            };
        }
    } catch (error) {
        console.error(
            "‚ùå Erro ao buscar dados otimizados dos dispositivos:",
            error
        );

        // Tratamento espec√≠fico de diferentes tipos de erro
        if (error.code === "ECONNREFUSED") {
            return {
                success: false,
                message:
                    "Servidor n√£o est√° dispon√≠vel. Verifique se o backend est√° rodando.",
            };
        } else if (error.code === "ETIMEDOUT") {
            return {
                success: false,
                message:
                    "Tempo limite da requisi√ß√£o excedido. Tente novamente.",
            };
        } else if (error.response) {
            return {
                success: false,
                message:
                    error.response.data?.message ||
                    `Erro ${error.response.status}: ${error.response.statusText}`,
            };
        } else {
            return {
                success: false,
                message: "Erro de rede. Verifique sua conex√£o com a internet.",
            };
        }
    }
};

// Fun√ß√£o para obter dados detalhados de um dispositivo espec√≠fico
export const getDispositivoById = async (dispositivoId) => {
    try {
        console.log(
            `üîç Buscando detalhes do dispositivo por ID:`,
            dispositivoId
        );
        console.log(`üîç Tipo do par√¢metro:`, typeof dispositivoId);

        // Verificar se o par√¢metro √© v√°lido
        if (
            !dispositivoId ||
            (typeof dispositivoId !== "string" &&
                typeof dispositivoId !== "number")
        ) {
            console.error(`‚ùå Par√¢metro inv√°lido:`, dispositivoId);
            return {
                success: false,
                data: null,
                message: "ID do dispositivo inv√°lido",
            };
        }

        // Converter para string se for n√∫mero e validar se √© um ID v√°lido
        const deviceId = String(dispositivoId);
        console.log(`üîÑ ID do dispositivo:`, deviceId);

        // Construir a URL explicitamente e de forma segura
        const baseUrl = apiClient.defaults.baseURL || API_CONFIG.BASE_URL;
        const deviceEndpoint = `/dispositivos/${deviceId}`;
        const fullUrl = `${baseUrl}${deviceEndpoint}`;

        console.log(`üìç URL completa sendo usada: ${fullUrl}`);
        console.log(`üìç Endpoint relativo: ${deviceEndpoint}`);

        const response = await apiClient.get(deviceEndpoint);

        if (response.data && response.data.success) {
            console.log(
                "‚úÖ Dados detalhados do dispositivo carregados com sucesso"
            );
            return {
                success: true,
                data: response.data.data,
                message: response.data.message,
            };
        } else {
            console.error("‚ùå Resposta da API sem sucesso:", response.data);
            return {
                success: false,
                data: null,
                message:
                    response.data?.message ||
                    "Falha ao carregar dados do dispositivo",
            };
        }
    } catch (error) {
        console.error("‚ùå Erro ao buscar dados do dispositivo:", error);

        if (error.response) {
            // Erro da API
            return {
                success: false,
                data: null,
                message:
                    error.response.data?.message ||
                    `Erro ${error.response.status}: ${error.response.statusText}`,
            };
        } else if (error.request) {
            // Erro de rede
            return {
                success: false,
                data: null,
                message:
                    "Erro de conex√£o com o servidor. Verifique sua conex√£o.",
            };
        } else {
            // Outro erro
            return {
                success: false,
                data: null,
                message: "Erro de rede. Verifique sua conex√£o com a internet.",
            };
        }
    }
};
